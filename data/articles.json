[
  {
    "id": 2,
    "title": "Jango Player - My first React Native App",
    "slugname": "jango-player-my-first-react-native-app",
    "category": "React Native • Audio players",
    "image": "https://dragostemelie.go.ro/images/articles/jango-player.png",
    "description": "While learning react native, I decided to create a music player from scratch. The app uses the Jango API for getting songs, and also redux and typescript for ease of scalability.",
    "content": "![Jango Player Screenshot](https://dragostemelie.go.ro/images/articles/jango-player.png)\n\nWhile learning react native, I decided to create a music player from scratch.\n\nThe app uses the [Jango API](https://www.jango.com/) for getting songs, and also redux and typescript for ease of scalability.\n\n## THE DESIGN:\n\nI designed the screens using Figma. You can check out the source [here](https://www.figma.com/file/x4gjvJakul5s0XugioTMtn/Jango-player).\n\n![Playing Screen](https://dragostemelie.go.ro/images/articles/playlist-playing.png)\n![Playlists Screen](https://dragostemelie.go.ro/images/articles/playlist-screens.png)\n\n## THE CODE\n\nYou can find the code on [Github](https://github.com/dragostemelie/jango-player). To install and test the app in an android simulator, [download the preview-build](https://github.com/dragostemelie/jango-player/raw/main/builds/jango-player-preview-build.apk). Also, check the builds folder for the custom development client if you want to run the project locally.\n",
    "author": "Dragos",
    "date": "2022-04-28"
  },
  {
    "id": 1,
    "title": "Using page lifecycle API with custom React hook",
    "slugname": "using-page-lifecycle-api-with-custom-react-hook",
    "category": "React • Custom hooks",
    "image": "https://dragostemelie.go.ro/images/articles/passive-or-active.jpg",
    "description": "The web application my team is building needs the users to be logged in, to be able to edit the content. The login is a token-based system with a short expiration time and the app is built using React JS.",
    "content": "![Notes screenshot](https://dragostemelie.go.ro/images/articles/passive-or-active.jpg)\n\nThe web application my team is building needs the users to be logged in, to be able to edit the content. The login is a token-based system with a short expiration time and the app is built using React JS.\n\nAs you can imagine, users sometimes leave the page open on the browser for several minutes, maybe hours. When they come back to the page, it can happen so that the token expired, but the user doesn't know it yet. He will find out only after making a request.\n\nWe needed a way to check if the token is valid every time the user returned to the page. Polling was one way to accomplish this, that is simply hitting an API endpoint to check validity at a set interval of time. But that seems like a lot of unnecessary requests for a simple token check.\n\n## Observing page states\n\nIt is possible to run JavaScript code that determines the current page state from the existing web platform APIs:\n\n```tsx\nconst getState = () => {\n  if (document.visibilityState === 'hidden') {\n    return 'hidden';\n  }\n  if (document.hasFocus()) {\n    return 'active';\n  }\n  return 'passive';\n};\n```\n\n## The hook\n\nOne elegant way to check the page state is using a React hook. Inside the hook, we can have an effect which will run on every page state change:\n\n```tsx\nuseEffect(() => {\n  // Set the next state\n  const visibilityChange = () => {\n    setPageState(getState());\n  };\n  // These  events can all use the same listener to observe state\n  // changes (they call the `getState()` function to determine the next state).\n  ['focus', 'blur', 'visibilitychange', 'resume'].forEach(type => {\n    window.addEventListener(type, visibilityChange, {\n      capture: true,\n    });\n  });\n  //Every next effect we need to remove the previous listeners\n  return () => {\n    ['focus', 'blur', 'visibilitychange', 'resume'].forEach(type => {\n      window.removeEventListener(type, visibilityChange);\n    });\n  };\n});\n```\n\nThe above code does two things:\n\n- Sets the pageState using the `getState()` function.\n\n- Adds capturing event listeners for all necessary page events\n\n## The usePageVisibility hook\n\nAnd here we have the complete `usePageVisibility` code:\n\n```tsx\nimport { useState, useEffect } from 'react';\n\nconst getState = () => {\n  if (document.visibilityState === 'hidden') {\n    return 'hidden';\n  }\n  if (document.hasFocus()) {\n    return 'active';\n  }\n  return 'passive';\n};\n\nexport const usePageVisibility = () => {\n  const [pageState, setPageState] = useState(getState());\n\n  useEffect(() => {\n    const visibilityChange = () => {\n      setPageState(getState());\n    };\n    //add listeners\n    ['focus', 'blur', 'visibilitychange', 'resume'].forEach(type => {\n      window.addEventListener(type, visibilityChange, {\n        capture: true,\n      });\n    });\n    //cleanup\n    return () => {\n      ['focus', 'blur', 'visibilitychange', 'resume'].forEach(type => {\n        window.removeEventListener(type, visibilityChange);\n      });\n    };\n  });\n  return pageState;\n};\n```\n\n## Putting usePageVisibility to Use\n\nHere’s a condensed version of the `ProtectedRoute` component with the `usePageVisibility` Hook imported at the top of the component and dropped into the code:\n\n```tsx\nimport { useState, useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { usePageVisibility } from './hooks';\n\nconst checkToken = () => {\n  //logic to verify the token\n};\n\nexport const ProtectedRoute = () => {\n  const [tokenExpired, setTokenExpired] = useState(false);\n  const pageState = usePageVisibility();\n\n  useEffect(() => {\n    if (pageState === 'active') setTokenExpired(checkToken());\n  }, [pageState]);\n\n  //If token expired, redirect\n  if (tokenExpired) return <Redirect to=\"/login\" />;\n  else return <Route component={Page} />;\n};\n```\n\nNow every time you leave and come back to the page, the `setTokenExpired()` will be triggered and update the component state.\n\n## Conclusion\n\nSometimes you need a simple way to check if a user is still logged in. With React Hooks, and especially the ability to put together custom Hooks, creating a reusable Hook to serve just such a purpose seemed inevitable.\n\nCheck [this article](https://developers.google.com/web/updates/2018/07/page-lifecycle-api) for a more in-depth look on how page lifecycle works.\n",
    "author": "Dragos",
    "date": "2021-10-15"
  },
  {
    "id": 0,
    "title": "A currency convertor with Excel VBA",
    "slugname": "a-currency-convertor-with-excel-vba",
    "category": "Excel • Visual Basic for Applications",
    "image": "https://dragostemelie.go.ro/images/articles/corrency-convertor-excel.jpg",
    "description": "One of the most time-wasting problems at my former job was to get the currency match for a list of dates. I came up with a solution to this problem by using VBA, the programming language of the office suite.",
    "content": "One of the most time-wasting problems at my former job was to get the currency match for a list of dates. I came up with a solution to this problem by using VBA, the programming language of the office suite.\n\nSince I am from Romania, the official RON currency rates are published by the National Bank of Romania([BNR](https://www.bnr.ro)) and all I had to do was to access the records.\n\nThe currency lists are grouped by years in XML files:\n\n- [https://www.bnr.ro/files/xml/years/nbrfxrates2020.xml](https://www.bnr.ro/files/xml/years/nbrfxrates2020.xml)\n- [https://www.bnr.ro/files/xml/years/nbrfxrates2021.xml](https://www.bnr.ro/files/xml/years/nbrfxrates2021.xml)\n- etc..\n\nI added a new module in the Visual Basic editor window(**Alt + F11**):\n\n![Module screenshot](https://dragostemelie.go.ro/images/articles/corrency-convertor-module.JPG)\n\nA reference to the Microsoft XML library is needed since we're gonna be dealing with XML file format:\n\n![References screenshot](https://dragostemelie.go.ro/images/articles/references-microsoft-xml-v6.JPG)\n\nAnd here is the function that reads the XML file, searches for the given currency symbol, and returns the rate. Putting that in the `currencyModule` and we're good to go:\n\n```vb\nPublic Function CURS(Data As Date, Symbol As String) As String\n    '### LOAD XML\n    Dim XMLDoc As MSXML2.DOMDocument60\n    Set XMLDoc = New MSXML2.DOMDocument60\n    XMLDoc.async = False\n    XMLDoc.validateOnParse = False\n    XMLDoc.SetProperty \"SelectionNamespaces\", \"xmlns:ns='http://www.bnr.ro/xsd'\"\n    XMLDoc.Load (\"https://www.bnr.ro/files/xml/years/nbrfxrates\" & Year(Data) & \".xml\")\n\n    '### CHECK DATE\n    Dim currencyDate As String, currencyValue As String\n    If IsDate(Data) Then\n        currencyDate = Format(Data, \"yyyy-mm-dd\")\n    Else\n        CURS = \"#VALUE\" 'currency date is invalid\n        Exit Function\n    End If\n\n    '### GET CURRENCY BY DATE\n    If XMLDoc.SelectNodes(\"/ns:DataSet/ns:Body/ns:Cube[@date='\" & currencyDate & \"']/ns:Rate[@currency='\" & UCase(Symbol) & \"']\").Length > 0 Then\n        currencyValue = XMLDoc.SelectNodes(\"/ns:DataSet/ns:Body/ns:Cube[@date='\" & currencyDate & \"']/ns:Rate[@currency='\" & UCase(Symbol) & \"']\").Item(0).Text\n    Else\n        CURS = \"#N/A\" 'currency for that date not found\n        Exit Function\n    End If\n    CURS = currencyValue\nEnd Function\n```\n\nMaking the function **Public** makes it possible to be used inside the workbook cells, like a normal formula: `=CURS(\"2021-10-01\",\"EUR\")`.\n\nThe [XMLDoc.SelectNodes](https://docs.microsoft.com/en-us/office/vba/api/word.xmlnode.selectnodes) function gets the XML node value that matches the XPath string, in this case: `DataSet->Body->Cube[@date]->Rate[@currency]`\n\nYou can download the Excel file [here](https://dragostemelie.go.ro/images/articles/Currency.xlsm). Keep in mind you need to have macros enabled for it to work.",
    "author": "Dragos",
    "date": "2021-10-13"
  }
]
